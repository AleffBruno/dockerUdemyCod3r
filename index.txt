Instalando docker linux {
    referencia: https://docs.docker.com/install/linux/docker-ce/ubuntu/
    $ sudo apt-get update
    $ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    ===>> PARA ARQUITETURA AMD64(a maioria dos linux é) <<===
    $ sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"
    ===>> #### <<===
    $ sudo apt-get update
    $ sudo apt-get install docker-ce docker-ce-cli containerd.io
}

Dica {
    sempre usar 'docker container/image/volume/...' para executar comandos, pois é mais verboso e com isso traz mais clareza a escrita
    ex: docker container/image/volume --help
        docker container/image/volume ls
}

Hello-world {
    docker container run hello-world
}

Gerenciar o container {
    docker container start <container_id || name> // starta o container
    docker container stop <container_id || name> // stopa o container
    docker container restart <container_id || name> // reinicia o container
}

Acessa logs dos containers {
    iniciar o container: docker container start <container_id || name>
    mostra os logs do container: docker container logs <container_id || name>
}

Mostra caracteristicas/informações do seu container {
    docker container inspect <container_id || name>
}

Executa comandos dentro do container {
    docker container exec <container_id || name> <comando>
    ex: docker container exec 04540545054 ps -aux // lista todos os processos desse container
}

Comando run {
    >sempre cria um novo container !
    >faz 4 comandos
        1.docker image pull
        2.docker container certificates
        3.docker container start
        4.docker container exec
    exemplos:
        docker container run -it debian bash
        docker container run --name mydeb -it debian bash   // --name da um nome para o container, bash ao final executa o bash nesse container
        docker container run -p 8080:80 nginx    // -p 8080:80 > 8080 é a posta que vai ser exposta para fora do container(vamos acessar na 8080) e a porta 80 é a porta interna que o nginx vai ser startado, nginx ao final vai baixar a img do nginx
        docker container run -d --name ex-deamon-basic -p 8080:80 -v "$(pwd)"/html:/usr/share/nginx/html nginx // -d significa executar no modo deamon(ou background)

}

Lista os containers {
    docker ps -a
}

Entra no container no modo interativo {
     docker start -ai <container_id || name>
}

Mapeamento de volume (mapear uma maquina do computador host para o container) {
    referencia: https://docs.docker.com/storage/volumes/
    OBS: CUIDADO COM 'QUALQUER' PASTA COM NOME SEPARADO (ex:"not fount","test case","my teste")
    1.Criar uma pasta (mkdir curso-docker)
    2.Dentro de pasta, criar outra (mkdir ex-volume)
    3.Dentro de ex-volume execute $ docker container run -p 8080:80 -v "$(pwd)"/not-found:/usr/share/nginx/html nginx     // -v <pasta do host que vai ser mapeada>:<pasta dentro do container que vai ser feito o mapeamento> esta mapeando o volume
        explicando 3. {
            $(pwd)/not-found, esta procurando dentro de 'ex-volume' a pasta not-found(que nao existe)
            /usr/share/nginx/html, pasta onde o nginx lê o arquivo index por padrao
        } 
    Resultado acima no linux : a pasta not-found foi criada porem nao aconteceu nada pois nao existia nenhum arquivo dentro da mesma

    Ex2: 
    1.Criar uma pasta (mkdir curso-docker)
    2.Dentro de pasta, criar outra (mkdir ex-volume)
    3.Dentro de ex-volume, crie uma pasta html (mkdir html)
    4.Dentro de html crie um index.html com uma pagina simples em html
    5.Dentro de ex-volume use, docker container run -p 8080:80 -v "$(pwd)"/html:/usr/share/nginx/html nginx
    Resultado acima no linux : Ao acessar <URL>:8080, o arquivo index da pasta html sera mostrado
}

Dicas sobre image {
    docker image pull <image_id || nome>  //baixa uma imagem 
    ex: docker image pull redis:latest
    docker image ls     // lista as imagens
    docker image rm     // remove uma imagem
    docker image inspect        // inspeciona a imagem
    docker image tag        // coloca tag em uma imagem
    docker image build      // builda uma imagem
    docker image push //publica a imagem
}

Dockerfile {
   deve-se criar um arquivo Dockerfile e colocar as configs da imagem
   docker image build -t ex-simple-build .   // -t é o nome da tag(tambem conhecido como nome da imagem), o ponto no final significa "pasta local", para ele procurar o Dockerfile nessa pasta
   docker image build --build-arg S3_BUCKET=myapp -t ex-build-arg .     // gera uma imagem passando parametros para a mesma (exemplo do Dockerfile esta em ./build-com-arg/Dockerfile)
}

Enviar imagens para DockerHub {
    Login no DockerHub
    Ter uma imagem pra subir, na aula foi criado uma imagem a partir de uma ja existente{
        docker image tag ex-simple-build dockercod3r/simple-build:1.0 // dockercod3r é o nome do usuario la no dockerhub, simple-build sufixo da imagemm,1.0 é a 'tag/versao' dela
    }
    docker login --username=dockercod3r    //Login DockerHub command line
    docker image push dockercod3r/simple-build:1.0
}

Redes {
    //None {
        nao tem acesso a internet e nem acessa os outros containers locais
        ex : docker container run -d --net none debian // --net none, esta setando a network como none
    }

    //Bridge {
        $ docker network inspect bridge
        [
            {
                "Name": "bridge",
                "Id": "3d073739330c5fc375827a8baf16d925a244ce08334a88c86105f66aaab3bf35",
                "Created": "2019-05-29T01:38:50.8211466Z",
                "Scope": "local",
                "Driver": "bridge",
                "EnableIPv6": false,
                "IPAM": {
                    "Driver": "default",
                    "Options": null,
                    "Config": [
                        {
                            "Subnet": "172.17.0.0/16",
                            "Gateway": "172.17.0.1"
                        }
                    ]
                },
                "Internal": false,
                "Attachable": false,
                "Ingress": false,
                "ConfigFrom": {
                    "Network": ""
                },
                "ConfigOnly": false,
                "Containers": {},
                "Options": {
                    "com.docker.network.bridge.default_bridge": "true",
                    "com.docker.network.bridge.enable_icc": "true",
                    "com.docker.network.bridge.enable_ip_masquerade": "true",
                    "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
                    "com.docker.network.bridge.name": "docker0",
                    "com.docker.network.driver.mtu": "1500"
                },
                "Labels": {}
            }
        ]

        // Atividade -> Criar 2 containers e fazer 1 acessar o outro usando o comando 'ping'
        $ docker container run -d --name container1 alpine sleep 1000
        $ docker container exec -it container1 ifconfig // semelhante ao ipconfig
        temos o IP 172.17.0.2 // que é um "filho" da rede bridge "pai", proveniente de 172.17.0.0, visto no Json acima
        $ docker container run -d --name container2 alpine sleep 1000
        $ docker container exec -it container2 ifconfig // semelhante ao ipconfig
        temos o IP 172.17.0.3 // que é um "filho" da rede bridge "pai", proveniente de 172.17.0.0, visto no Json acima
        $ docker container exec -it container1 ping 172.17.0.3 // enviando um ping do container1 para container2, tb é possivel enviar ping para a "internet"

        // Atividade -> Criar uma nova rede, criar um container nessa rede, fazer os container de outra rede se comunicarem com essa nova rede
        $ docker network create --driver bridge rede_nova
        $ docker network ls
        $ docker network inspect rede_nova
        [
            {
                "Name": "rede_nova",
                "Id": "81ff23caf9a1c705daea253f318b1e5f64e53d333a4910e4527ac1ab90108bad",
                "Created": "2019-05-29T11:09:33.737191431Z",
                "Scope": "local",
                "Driver": "bridge",
                "EnableIPv6": false,
                "IPAM": {
                    "Driver": "default",
                    "Options": {},
                    "Config": [
                        {
                            "Subnet": "172.19.0.0/16",
                            "Gateway": "172.19.0.1"
                        }
                    ]
                },
                "Internal": false,
                "Attachable": false,
                "Ingress": false,
                "ConfigFrom": {
                    "Network": ""
                },
                "ConfigOnly": false,
                "Containers": {},
                "Options": {},
                "Labels": {}
            }
        ]

        $ docker container run -d --name container3 --net rede_nova alpine sleep 1000
        $ docker container exec -it container3 ifconfig
        temos o ip 172.19.0.2 // que é um "filho" da rede rede_nova "pai", proveniente de 172.19.0.0, visto no Json acima
        $ docker container exec -it container3 ping 172.17.0.2 // Falha!, pois as redes nao tem nenhuma conexao
        $ docker network connect bridge container3 // agora container3 tem a conexao com a rede_nova e a rede bridge
        $ docker container exec -it container3 ifconfig // mostra esse container tendo acesso as 2 redes
        temos o IP 172.19.0.2 e 172.17.0.2 // um IP e da rede 'bridge' e o outro é da rede 'rede_nova'
        $ docker container exec -it container3 ping 172.17.0.2
        SUCESSO
        $ docker network disconnect bridge container3 // tira a conexao da rede bridge com o container3
    }

    //host {
        Faz o container usar diretamente a interface de rede da maquina host, nao tem o bridge como intermediario ( tem um nivel de proteção mais baixo, porem uma velocidade maior de comunicação )
        $ ifconfig // no host
        br-0a539551ca31: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255
        ether 02:42:99:78:69:6e  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

        br-81ff23caf9a1: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.19.0.1  netmask 255.255.0.0  broadcast 172.19.255.255
        ether 02:42:eb:3e:45:3d  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

        docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:39:8f:f6:f7  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

        eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.0.0.4  netmask 255.255.255.0  broadcast 10.0.0.255
        inet6 fe80::20d:3aff:fe1f:248  prefixlen 64  scopeid 0x20<link>
        ether 00:0d:3a:1f:02:48  txqueuelen 1000  (Ethernet)
        RX packets 32817  bytes 46554587 (46.5 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 2944  bytes 369511 (369.5 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

        lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 138  bytes 12406 (12.4 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 138  bytes 12406 (12.4 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0


        $ docker container run -d --name container4 --net host alpine sleep 1000
        $ docker container exec -it container4 ifconfig


        br-0a539551ca31 Link encap:Ethernet  HWaddr 02:42:99:78:69:6E
          inet addr:172.18.0.1  Bcast:172.18.255.255  Mask:255.255.0.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

        br-81ff23caf9a1 Link encap:Ethernet  HWaddr 02:42:EB:3E:45:3D
          inet addr:172.19.0.1  Bcast:172.19.255.255  Mask:255.255.0.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

        docker0   Link encap:Ethernet  HWaddr 02:42:39:8F:F6:F7
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

        eth0      Link encap:Ethernet  HWaddr 00:0D:3A:1F:02:48
          inet addr:10.0.0.4  Bcast:10.0.0.255  Mask:255.255.255.0
          inet6 addr: fe80::20d:3aff:fe1f:248/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:34182 errors:0 dropped:0 overruns:0 frame:0
          TX packets:4648 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:46994037 (44.8 MiB)  TX bytes:741567 (724.1 KiB)

        lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:138 errors:0 dropped:0 overruns:0 frame:0
          TX packets:138 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:12406 (12.1 KiB)  TX bytes:12406 (12.1 KiB)


        
    }
    //Overlay (Swarm)
}
