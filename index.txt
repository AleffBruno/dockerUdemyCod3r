Instalando docker linux {
    referencia: https://docs.docker.com/install/linux/docker-ce/ubuntu/
    $ sudo apt-get update
    $ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
    $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    ===>> PARA ARQUITETURA AMD64(a maioria dos linux é) <<===
    $ sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"
    ===>> #### <<===
    $ sudo apt-get update
    $ sudo apt-get install docker-ce docker-ce-cli containerd.io
}

Dica {
    sempre usar 'docker container/image/volume/...' para executar comandos, pois é mais verboso e com isso traz mais clareza a escrita
    ex: docker container/image/volume --help
        docker container/image/volume ls
}

Hello-world {
    docker container run hello-world
}

Gerenciar o container {
    docker container start <container_id || name> // starta o container
    docker container stop <container_id || name> // stopa o container
    docker container restart <container_id || name> // reinicia o container
}

Acessa logs dos containers {
    iniciar o container: docker container start <container_id || name>
    mostra os logs do container: docker container logs <container_id || name>
}

Mostra caracteristicas/informações do seu container {
    docker container inspect <container_id || name>
}

Executa comandos dentro do container {
    docker container exec <container_id || name> <comando>
    ex: docker container exec 04540545054 ps -aux // lista todos os processos desse container
}

Comando run {
    >sempre cria um novo container !
    >faz 4 comandos
        1.docker image pull
        2.docker container certificates
        3.docker container start
        4.docker container exec
    exemplos:
        docker container run -it debian bash
        docker container run --name mydeb -it debian bash   // --name da um nome para o container, bash ao final executa o bash nesse container
        docker container run -p 8080:80 nginx    // -p 8080:80 > 8080 é a posta que vai ser exposta para fora do container(vamos acessar na 8080) e a porta 80 é a porta interna que o nginx vai ser startado, nginx ao final vai baixar a img do nginx
        docker container run -d --name ex-deamon-basic -p 8080:80 -v "$(pwd)"/html:/usr/share/nginx/html nginx // -d significa executar no modo deamon(ou background)

}

Lista os containers {
    docker ps -a
}

Entra no container no modo interativo {
     docker start -ai <container_id || name>
}

Mapeamento de volume (mapear uma maquina do computador host para o container) {
    referencia: https://docs.docker.com/storage/volumes/
    OBS: CUIDADO COM 'QUALQUER' PASTA COM NOME SEPARADO (ex:"not fount","test case","my teste")
    1.Criar uma pasta (mkdir curso-docker)
    2.Dentro de pasta, criar outra (mkdir ex-volume)
    3.Dentro de ex-volume execute $ docker container run -p 8080:80 -v "$(pwd)"/not-found:/usr/share/nginx/html nginx     // -v <pasta do host que vai ser mapeada>:<pasta dentro do container que vai ser feito o mapeamento> esta mapeando o volume
        explicando 3. {
            $(pwd)/not-found, esta procurando dentro de 'ex-volume' a pasta not-found(que nao existe)
            /usr/share/nginx/html, pasta onde o nginx lê o arquivo index por padrao
        } 
    Resultado acima no linux : a pasta not-found foi criada porem nao aconteceu nada pois nao existia nenhum arquivo dentro da mesma

    Ex2: 
    1.Criar uma pasta (mkdir curso-docker)
    2.Dentro de pasta, criar outra (mkdir ex-volume)
    3.Dentro de ex-volume, crie uma pasta html (mkdir html)
    4.Dentro de html crie um index.html com uma pagina simples em html
    5.Dentro de ex-volume use, docker container run -p 8080:80 -v "$(pwd)"/html:/usr/share/nginx/html nginx
    Resultado acima no linux : Ao acessar <URL>:8080, o arquivo index da pasta html sera mostrado
}

Dicas sobre image {
    docker image pull <image_id || nome>  //baixa uma imagem 
    ex: docker image pull redis:latest
    docker image ls     // lista as imagens
    docker image rm     // remove uma imagem
    docker image inspect        // inspeciona a imagem
    docker image tag        // coloca tag em uma imagem
    docker image build      // builda uma imagem
    docker image push //publica a imagem
}

Dockerfile {
   deve-se criar um arquivo Dockerfile e colocar as configs da imagem
   docker image build -t ex-simple-build .   // -t é o nome da tag(tambem conhecido como nome da imagem), o ponto no final significa "pasta local", para ele procurar o Dockerfile nessa pasta
   docker image build --build-arg S3_BUCKET=myapp -t ex-build-arg .     // gera uma imagem passando parametros para a mesma (exemplo do Dockerfile esta em ./build-com-arg/Dockerfile)
}

Enviar imagens para DockerHub {
    Login no DockerHub
    Ter uma imagem pra subir, na aula foi criado uma imagem a partir de uma ja existente{
        docker image tag ex-simple-build dockercod3r/simple-build:1.0 // dockercod3r é o nome do usuario la no dockerhub, simple-build sufixo da imagemm,1.0 é a 'tag/versao' dela
    }
    docker login --username=dockercod3r    //Login DockerHub command line
    docker image push dockercod3r/simple-build:1.0
}
